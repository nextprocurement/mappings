[
  {
    "op": "core/column-removal",
    "columnName": "Summary",
    "description": "Remove column Summary"
  },
  {
    "op": "core/column-move",
    "columnName": "TenderingProcess_TenderSubmissionDeadlinePeriod",
    "index": 55,
    "description": "Move column TenderingProcess_TenderSubmissionDeadlinePeriod to position 55"
  },
  {
    "op": "core/column-removal",
    "columnName": "TenderingProcess_TenderSubmission_EndDate",
    "description": "Remove column TenderingProcess_TenderSubmission_EndDate"
  },
  {
    "op": "core/column-removal",
    "columnName": "TenderingProcess_TenderSubmission_EndTime",
    "description": "Remove column TenderingProcess_TenderSubmission_EndTime"
  },
  {
    "op": "core/column-move",
    "columnName": "TenderingProcess_ParticipationRequestReceptionPeriod",
    "index": 140,
    "description": "Move column TenderingProcess_ParticipationRequestReceptionPeriod to position 140"
  },
  {
    "op": "core/column-removal",
    "columnName": "TenderingProcess_ParticipationRequest_EndTime",
    "description": "Remove column TenderingProcess_ParticipationRequest_EndTime"
  },
  {
    "op": "core/column-removal",
    "columnName": "TenderingProcess_ParticipationRequest_EndDate",
    "description": "Remove column TenderingProcess_ParticipationRequest_EndDate"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "LocatedContractingParty_Parent_Parent_PartyName",
    "expression": "grel:value",
    "onError": "set-to-blank",
    "newColumnName": "LocatedContractingParty_Parent_Parent_PartyName_URI",
    "columnInsertIndex": 111,
    "description": "Create column LocatedContractingParty_Parent_Parent_PartyName_URI at index 111 based on column LocatedContractingParty_Parent_Parent_PartyName using expression grel:value"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_Parent_Parent_PartyName_URI",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_Parent_Parent_PartyName_URI using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_Parent_Parent_PartyName_URI",
    "expression": "grel:value.replace(\" \", \"-\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_Parent_Parent_PartyName_URI using expression grel:value.replace(\" \", \"-\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_Parent_Parent_PartyName_URI",
    "expression": "grel:value.replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_Parent_Parent_PartyName_URI using expression grel:value.replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "LocatedContractingParty_Name",
    "expression": "grel:value",
    "onError": "set-to-blank",
    "newColumnName": "LocatedContractingParty_Name_URI",
    "columnInsertIndex": 8,
    "description": "Create column LocatedContractingParty_Name_URI at index 8 based on column LocatedContractingParty_Name using expression grel:value"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_Name_URI",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"-\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_Name_URI using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"-\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_Name_URI",
    "expression": "grel:value.replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_Name_URI using expression grel:value.replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "LocatedContractingParty_Parent_PartyName",
    "expression": "grel:value",
    "onError": "set-to-blank",
    "newColumnName": "LocatedContractingParty_Parent_PartyName_URI",
    "columnInsertIndex": 111,
    "description": "Create column LocatedContractingParty_Parent_PartyName_URI at index 111 based on column LocatedContractingParty_Parent_PartyName using expression grel:value"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_Parent_PartyName_URI",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"-\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_Parent_PartyName_URI using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"-\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_Parent_PartyName_URI",
    "expression": "grel:value.replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_Parent_PartyName_URI using expression grel:value.replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "LocatedContractingParty_Parent_Parent_Parent_PartyName",
    "expression": "grel:value",
    "onError": "set-to-blank",
    "newColumnName": "LocatedContractingParty_Parent_Parent_Parent_PartyName_URI",
    "columnInsertIndex": 115,
    "description": "Create column LocatedContractingParty_Parent_Parent_Parent_PartyName_URI at index 115 based on column LocatedContractingParty_Parent_Parent_Parent_PartyName using expression grel:value"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_Parent_Parent_Parent_PartyName_URI",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"-\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_Parent_Parent_Parent_PartyName_URI using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"-\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_Parent_Parent_Parent_PartyName_URI",
    "expression": "grel:value.replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_Parent_Parent_Parent_PartyName_URI using expression grel:value.replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "LocatedContractingParty_Parent_Parent_Parent_Parent_PartyName",
    "expression": "grel:value",
    "onError": "set-to-blank",
    "newColumnName": "LocatedContractingParty_Parent_Parent_Parent_Parent_PartyName_URI",
    "columnInsertIndex": 117,
    "description": "Create column LocatedContractingParty_Parent_Parent_Parent_Parent_PartyName_URI at index 117 based on column LocatedContractingParty_Parent_Parent_Parent_Parent_PartyName using expression grel:value"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_Parent_Parent_Parent_Parent_PartyName_URI",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"-\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_Parent_Parent_Parent_Parent_PartyName_URI using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"-\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_Parent_Parent_Parent_Parent_PartyName_URI",
    "expression": "grel:value.replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_Parent_Parent_Parent_Parent_PartyName_URI using expression grel:value.replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_PartyName",
    "expression": "grel:value",
    "onError": "set-to-blank",
    "newColumnName": "LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_PartyName_URI",
    "columnInsertIndex": 119,
    "description": "Create column LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_PartyName_URI at index 119 based on column LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_PartyName using expression grel:value"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_PartyName_URI",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"-\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_PartyName_URI using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"-\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_PartyName_URI",
    "expression": "grel:value.replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_PartyName_URI using expression grel:value.replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_Parent_PartyName",
    "expression": "grel:value",
    "onError": "set-to-blank",
    "newColumnName": "LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_Parent_PartyName_URI",
    "columnInsertIndex": 121,
    "description": "Create column LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_Parent_PartyName_URI at index 121 based on column LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_Parent_PartyName using expression grel:value"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_Parent_PartyName_URI",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"-\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_Parent_PartyName_URI using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"-\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_Parent_PartyName_URI",
    "expression": "grel:value.replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_Parent_PartyName_URI using expression grel:value.replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_Parent_Parent_PartyName",
    "expression": "grel:value",
    "onError": "set-to-blank",
    "newColumnName": "LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_Parent_Parent_PartyName_URI",
    "columnInsertIndex": 123,
    "description": "Create column LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_Parent_Parent_PartyName_URI at index 123 based on column LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_Parent_Parent_PartyName using expression grel:value"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_Parent_Parent_PartyName_URI",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"-\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_Parent_Parent_PartyName_URI using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"-\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_Parent_Parent_PartyName_URI",
    "expression": "grel:value.replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_Parent_Parent_PartyName_URI using expression grel:value.replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_Parent_Parent_Parent_PartyName",
    "expression": "grel:value",
    "onError": "set-to-blank",
    "newColumnName": "LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_Parent_Parent_Parent_PartyName_URI",
    "columnInsertIndex": 146,
    "description": "Create column LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_Parent_Parent_Parent_PartyName_URI at index 146 based on column LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_Parent_Parent_Parent_PartyName using expression grel:value"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_Parent_Parent_Parent_PartyName_URI",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"-\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_Parent_Parent_Parent_PartyName_URI using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"-\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_Parent_Parent_Parent_PartyName_URI",
    "expression": "grel:value.replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_Parent_Parent_Parent_PartyName_URI using expression grel:value.replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ID",
    "expression": "grel:value.replace(\"https://contrataciondelestado.es/sindicacion/licitacionesPerfilContratante/\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ID using expression grel:value.replace(\"https://contrataciondelestado.es/sindicacion/licitacionesPerfilContratante/\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ContractFolder_ID",
    "expression": "grel:value.replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ContractFolder_ID using expression grel:value.replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LegalDocumentReference_ID",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LegalDocumentReference_ID using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LegalDocumentReference_ID",
    "expression": "grel:value.replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LegalDocumentReference_ID using expression grel:value.replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TechnicalDocumentReference_ID",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TechnicalDocumentReference_ID using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TechnicalDocumentReference_ID",
    "expression": "grel:value.replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TechnicalDocumentReference_ID using expression grel:value.replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_ProcurementLegislationID",
    "expression": "grel:value.replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_ProcurementLegislationID using expression grel:value.replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProject_CountrySubentity",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProject_CountrySubentity using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProject_CountrySubentity",
    "expression": "grel:value.replace(/[^A-ÑZa-ñz0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProject_CountrySubentity using expression grel:value.replace(/[^A-ÑZa-ñz0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_ID",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\").replace(\"\\\"\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_ID using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\").replace(\"\\\"\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProject_ItemClassificationCode",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProject_ItemClassificationCode using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProject_ItemClassificationCode",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProject_ItemClassificationCode using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_ResultCode",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_ResultCode using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_ResultCode",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_ResultCode using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_Description",
    "expression": "grel:if(value.startsWith(\"['\"), value.replace(\",\", \"\"), value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_Description using expression grel:if(value.startsWith(\"['\"), value.replace(\",\", \"\"), value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_Description",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_Description using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_Description",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_Description using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_AwardDate",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_AwardDate using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_AwardDate",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_AwardDate using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_ReceivedTenderQuantity",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_ReceivedTenderQuantity using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_ReceivedTenderQuantity",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_ReceivedTenderQuantity using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_StartDate",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_StartDate using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_StartDate",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_StartDate using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_ContractID",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_ContractID using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_ContractID",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_ContractID using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_ContractIssueDate",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_ContractIssueDate using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_ContractIssueDate",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_ContractIssueDate using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_WinningParty_ID",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_WinningParty_ID using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_WinningParty_ID",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_WinningParty_ID using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_WinningParty_Name",
    "expression": "grel:if(value.startsWith(\"['\"), value.replace(\",\", \"\"), value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_WinningParty_Name using expression grel:if(value.startsWith(\"['\"), value.replace(\",\", \"\"), value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_WinningParty_Name",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_WinningParty_Name using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_WinningParty_Name",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_WinningParty_Name using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_AwardedTenderedProject_TaxExclusiveAmount",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_AwardedTenderedProject_TaxExclusiveAmount using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_AwardedTenderedProject_TaxExclusiveAmount",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_AwardedTenderedProject_TaxExclusiveAmount using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_AwardedTenderedProject_PayableAmount",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_AwardedTenderedProject_PayableAmount using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_AwardedTenderedProject_PayableAmount",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_AwardedTenderedProject_PayableAmount using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_GuaranteeTypeCode",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_GuaranteeTypeCode using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_GuaranteeTypeCode",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_GuaranteeTypeCode using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_AmountRate",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_AmountRate using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_AmountRate",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_AmountRate using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_TechnicalEvaluationCriteria_TypeCode",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_TechnicalEvaluationCriteria_TypeCode using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_TechnicalEvaluationCriteria_TypeCode",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_TechnicalEvaluationCriteria_TypeCode using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_TechnicalEvaluationCriteria_Description",
    "expression": "grel:if(value.startsWith(\"['\"), value.replace(\",\", \"\"), value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_TechnicalEvaluationCriteria_Description using expression grel:if(value.startsWith(\"['\"), value.replace(\",\", \"\"), value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_TechnicalEvaluationCriteria_Description",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_TechnicalEvaluationCriteria_Description using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_TechnicalEvaluationCriteria_Description",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_TechnicalEvaluationCriteria_Description using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_FinancialEvaluationCriteria_TypeCode",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_FinancialEvaluationCriteria_TypeCode using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_FinancialEvaluationCriteria_TypeCode",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_FinancialEvaluationCriteria_TypeCode using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_FinancialEvaluationCriteria_Description",
    "expression": "grel:if(value.startsWith(\"['\"), value.replace(\",\", \"\"), value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_FinancialEvaluationCriteria_Description using expression grel:if(value.startsWith(\"['\"), value.replace(\",\", \"\"), value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_FinancialEvaluationCriteria_Description",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_FinancialEvaluationCriteria_Description using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_FinancialEvaluationCriteria_Description",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_FinancialEvaluationCriteria_Description using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_RequirementTypeCode",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_RequirementTypeCode using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_RequirementTypeCode",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_RequirementTypeCode using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_AwardingTerms_Description",
    "expression": "grel:if(value.startsWith(\"['\"), value.replace(\",\", \"\"), value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_AwardingTerms_Description using expression grel:if(value.startsWith(\"['\"), value.replace(\",\", \"\"), value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_AwardingTerms_Description",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_AwardingTerms_Description using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_AwardingTerms_Description",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_AwardingTerms_Description using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_AwardingTerms_WeightNumeric",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_AwardingTerms_WeightNumeric using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_AwardingTerms_WeightNumeric",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_AwardingTerms_WeightNumeric using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ValidNoticeInfo_NoticeTypeCode",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ValidNoticeInfo_NoticeTypeCode using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ValidNoticeInfo_NoticeTypeCode",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ValidNoticeInfo_NoticeTypeCode using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ValidNoticeInfo_PublicationMediaName",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ValidNoticeInfo_PublicationMediaName using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ValidNoticeInfo_PublicationMediaName",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ValidNoticeInfo_PublicationMediaName using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ValidNoticeInfo_IssueDate",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ValidNoticeInfo_IssueDate using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ValidNoticeInfo_IssueDate",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ValidNoticeInfo_IssueDate using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ValidNoticeInfo_DocumentTypeCode",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ValidNoticeInfo_DocumentTypeCode using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ValidNoticeInfo_DocumentTypeCode",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ValidNoticeInfo_DocumentTypeCode using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ValidNoticeInfo_URI",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ValidNoticeInfo_URI using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ValidNoticeInfo_URI",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ValidNoticeInfo_URI using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ValidNoticeInfo_FileName",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ValidNoticeInfo_FileName using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ValidNoticeInfo_FileName",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ValidNoticeInfo_FileName using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "GeneralDocument_ID",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column GeneralDocument_ID using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "GeneralDocument_ID",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column GeneralDocument_ID using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "GeneralDocument_URI",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column GeneralDocument_URI using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "GeneralDocument_URI",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column GeneralDocument_URI using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "GeneralDocument_FileName",
    "expression": "grel:if(value.startsWith(\"['\"), value.replace(\",\", \"\"), value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column GeneralDocument_FileName using expression grel:if(value.startsWith(\"['\"), value.replace(\",\", \"\"), value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "GeneralDocument_FileName",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column GeneralDocument_FileName using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "GeneralDocument_FileName",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column GeneralDocument_FileName using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_ID",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_ID using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_ID",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_ID using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_Name",
    "expression": "grel:if(value.startsWith(\"['\"), value.replace(\",\", \"\"), value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_Name using expression grel:if(value.startsWith(\"['\"), value.replace(\",\", \"\"), value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_Name",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_Name using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_Name",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_Name using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_TotalAmount",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_TotalAmount using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_TotalAmount",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_TotalAmount using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_TaxExclusiveAmount",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_TaxExclusiveAmount using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_TaxExclusiveAmount",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_TaxExclusiveAmount using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_ItemClassificationCode",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_ItemClassificationCode using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_ItemClassificationCode",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_ItemClassificationCode using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_CountrySubentity",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_CountrySubentity using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_CountrySubentity",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_CountrySubentity using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_CountrySubentityCode",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_CountrySubentityCode using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_CountrySubentityCode",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_CountrySubentityCode using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_CountryCode",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_CountryCode using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_CountryCode",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_CountryCode using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_CountryName",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_CountryName using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_CountryName",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_CountryName using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_LowerTenderAmount",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_LowerTenderAmount using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_LowerTenderAmount",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_LowerTenderAmount using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_HigherTenderAmount",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_HigherTenderAmount using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_HigherTenderAmount",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_HigherTenderAmount using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_HigherTenderAmount",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_HigherTenderAmount using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_AwardedTenderedProject_ProcurementProjectLotID",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_AwardedTenderedProject_ProcurementProjectLotID using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_AwardedTenderedProject_ProcurementProjectLotID",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_AwardedTenderedProject_ProcurementProjectLotID using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "AdditionalDocumentReference_ID",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column AdditionalDocumentReference_ID using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "AdditionalDocumentReference_ID",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column AdditionalDocumentReference_ID using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "AdditionalDocumentReference_URI",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column AdditionalDocumentReference_URI using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "AdditionalDocumentReference_URI",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column AdditionalDocumentReference_URI using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "AdditionalDocumentReference_DocumentHash",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column AdditionalDocumentReference_DocumentHash using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "AdditionalDocumentReference_DocumentHash",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column AdditionalDocumentReference_DocumentHash using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_SMEAwardedIndicator",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_SMEAwardedIndicator using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_SMEAwardedIndicator",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_SMEAwardedIndicator using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ValidNoticeInfo_AgencyID",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ValidNoticeInfo_AgencyID using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ValidNoticeInfo_AgencyID",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ValidNoticeInfo_AgencyID using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ValidNoticeInfo_SendDate",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ValidNoticeInfo_SendDate using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ValidNoticeInfo_SendDate",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ValidNoticeInfo_SendDate using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_CodeValue",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_CodeValue using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_CodeValue",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_CodeValue using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_AbnormallyLowTendersIndicator",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_AbnormallyLowTendersIndicator using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_AbnormallyLowTendersIndicator",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_AbnormallyLowTendersIndicator using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_FundingProgramCode",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_FundingProgramCode using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_FundingProgramCode",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_FundingProgramCode using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_LiabilityAmount",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_LiabilityAmount using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_LiabilityAmount",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_LiabilityAmount using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ContractModification_ID",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ContractModification_ID using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ContractModification_ID",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ContractModification_ID using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ContractModification_Note",
    "expression": "grel:if(value.startsWith(\"['\"), value.replace(\",\", \"\"), value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ContractModification_Note using expression grel:if(value.startsWith(\"['\"), value.replace(\",\", \"\"), value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ContractModification_Note",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ContractModification_Note using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ContractModification_Note",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ContractModification_Note using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ContractModification_ContractID",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ContractModification_ContractID using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ContractModification_ContractID",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ContractModification_ContractID using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ContractModification_TaxExclusiveAmount",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ContractModification_TaxExclusiveAmount using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ContractModification_TaxExclusiveAmount",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ContractModification_TaxExclusiveAmount using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ContractModification_Final_TaxExclusiveAmount",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ContractModification_Final_TaxExclusiveAmount using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ContractModification_Final_TaxExclusiveAmount",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ContractModification_Final_TaxExclusiveAmount using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ContractModification_DurationMeasure",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ContractModification_DurationMeasure using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ContractModification_DurationMeasure",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ContractModification_DurationMeasure using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ContractModification_FinalDurationMeasure",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ContractModification_FinalDurationMeasure using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ContractModification_FinalDurationMeasure",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ContractModification_FinalDurationMeasure using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_CityName",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_CityName using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_CityName",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_CityName using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_PostalZone",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_PostalZone using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_PostalZone",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_PostalZone using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_ActivityCode",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_ActivityCode using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_ActivityCode",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_ActivityCode using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_SubcontractTermsRate",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_SubcontractTermsRate using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_SubcontractTermsRate",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_SubcontractTermsRate using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_SubcontractTermsDescription",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_SubcontractTermsDescription using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_SubcontractTermsDescription",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_SubcontractTermsDescription using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_SMEsReceivedTenderQuantity",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_SMEsReceivedTenderQuantity using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_SMEsReceivedTenderQuantity",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_SMEsReceivedTenderQuantity using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_WinningParty_CountrySubentityCode",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_WinningParty_CountrySubentityCode using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_WinningParty_CountrySubentityCode",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_WinningParty_CountrySubentityCode using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_WinningParty_CityName",
    "expression": "grel:if(value.startsWith(\"['\"), value.replace(\",\", \"\"), value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_WinningParty_CityName using expression grel:if(value.startsWith(\"['\"), value.replace(\",\", \"\"), value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_WinningParty_CityName",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_WinningParty_CityName using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_WinningParty_CityName",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_WinningParty_CityName using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_WinningParty_PostalZone",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_WinningParty_PostalZone using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_WinningParty_PostalZone",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_WinningParty_PostalZone using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_WinningParty_CountryCode",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_WinningParty_CountryCode using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_WinningParty_CountryCode",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_WinningParty_CountryCode using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_SpecificTendererRequirementDescription",
    "expression": "grel:if(value.startsWith(\"['\"), value.replace(\",\", \"\"), value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_SpecificTendererRequirementDescription using expression grel:if(value.startsWith(\"['\"), value.replace(\",\", \"\"), value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_SpecificTendererRequirementDescription",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_SpecificTendererRequirementDescription using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_SpecificTendererRequirementDescription",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_SpecificTendererRequirementDescription using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_AwardingCriteriaTypeCode",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_AwardingCriteriaTypeCode using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_AwardingCriteriaTypeCode",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_AwardingCriteriaTypeCode using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_AwardingNote",
    "expression": "grel:if(value.startsWith(\"['\"), value.replace(\",\", \"\"), value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_AwardingNote using expression grel:if(value.startsWith(\"['\"), value.replace(\",\", \"\"), value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_AwardingNote",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_AwardingNote using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_AwardingNote",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_AwardingNote using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_AwardingCriteriaSubTypeCode",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_AwardingCriteriaSubTypeCode using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_AwardingCriteriaSubTypeCode",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_AwardingCriteriaSubTypeCode using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "GeneralDocument_DocumentTypeCode",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column GeneralDocument_DocumentTypeCode using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "GeneralDocument_DocumentTypeCode",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column GeneralDocument_DocumentTypeCode using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_ContractExecutionName",
    "expression": "grel:if(value.startsWith(\"['\"), value.replace(\",\", \"\"), value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_ContractExecutionName using expression grel:if(value.startsWith(\"['\"), value.replace(\",\", \"\"), value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_ContractExecutionName",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_ContractExecutionName using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_ContractExecutionName",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_ContractExecutionName using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_ExecutionCode",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_ExecutionCode using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_ExecutionCode",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_ExecutionCode using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_ContractExecutionDescription",
    "expression": "grel:if(value.startsWith(\"['\"), value.replace(\",\", \"\"), value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_ContractExecutionDescription using expression grel:if(value.startsWith(\"['\"), value.replace(\",\", \"\"), value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_ContractExecutionDescription",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_ContractExecutionDescription using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_ContractExecutionDescription",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_ContractExecutionDescription using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_AwardingCriteriaTypeCode",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_AwardingCriteriaTypeCode using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_AwardingCriteriaTypeCode",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_AwardingCriteriaTypeCode using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_AwardingCriteriaDescription",
    "expression": "grel:if(value.startsWith(\"['\"), value.replace(\",\", \"\"), value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_AwardingCriteriaDescription using expression grel:if(value.startsWith(\"['\"), value.replace(\",\", \"\"), value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_AwardingCriteriaDescription",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_AwardingCriteriaDescription using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_AwardingCriteriaDescription",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_AwardingCriteriaDescription using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_AwardingCriteriaNote",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_AwardingCriteriaNote using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_AwardingCriteriaNote",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_AwardingCriteriaNote using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_AwardingCriteriaSubTypeCode",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_AwardingCriteriaSubTypeCode using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_AwardingCriteriaSubTypeCode",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_AwardingCriteriaSubTypeCode using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_AwardingTerms_WeightNumeric",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_AwardingTerms_WeightNumeric using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_AwardingTerms_WeightNumeric",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_AwardingTerms_WeightNumeric using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_TechnicalEvaluation_ThresholdQuantity",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_TechnicalEvaluation_ThresholdQuantity using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_TechnicalEvaluation_ThresholdQuantity",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_TechnicalEvaluation_ThresholdQuantity using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_FinancialEvaluation_ThresholdQuantity",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_FinancialEvaluation_ThresholdQuantity using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_FinancialEvaluation_ThresholdQuantity",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_FinancialEvaluation_ThresholdQuantity using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_EUNationalsReceivedQuantity",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_EUNationalsReceivedQuantity using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_EUNationalsReceivedQuantity",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_EUNationalsReceivedQuantity using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_NonEUNationalsReceivedQuantity",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_NonEUNationalsReceivedQuantity using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_NonEUNationalsReceivedQuantity",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_NonEUNationalsReceivedQuantity using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_TechnicalEvaluationCriteria_TypeCode",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_TechnicalEvaluationCriteria_TypeCode using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_TechnicalEvaluationCriteria_TypeCode",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_TechnicalEvaluationCriteria_TypeCode using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_TechnicalEvaluationCriteria_Description",
    "expression": "grel:if(value.startsWith(\"['\"), value.replace(\",\", \"\"), value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_TechnicalEvaluationCriteria_Description using expression grel:if(value.startsWith(\"['\"), value.replace(\",\", \"\"), value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_TechnicalEvaluationCriteria_Description",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_TechnicalEvaluationCriteria_Description using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_TechnicalEvaluationCriteria_Description",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_TechnicalEvaluationCriteria_Description using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_TechnicalEvaluation_ThresholdQuantity",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_TechnicalEvaluation_ThresholdQuantity using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_TechnicalEvaluation_ThresholdQuantity",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_TechnicalEvaluation_ThresholdQuantity using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_FinancialEvaluationCriteria_TypeCode",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_FinancialEvaluationCriteria_TypeCode using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_FinancialEvaluationCriteria_TypeCode",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_FinancialEvaluationCriteria_TypeCode using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_FinancialEvaluationCriteria_Description",
    "expression": "grel:if(value.startsWith(\"['\"), value.replace(\",\", \"\"), value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_FinancialEvaluationCriteria_Description using expression grel:if(value.startsWith(\"['\"), value.replace(\",\", \"\"), value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_FinancialEvaluationCriteria_Description",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_FinancialEvaluationCriteria_Description using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_FinancialEvaluationCriteria_Description",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_FinancialEvaluationCriteria_Description using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_FinancialEvaluation_ThresholdQuantity",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_FinancialEvaluation_ThresholdQuantity using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_FinancialEvaluation_ThresholdQuantity",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_FinancialEvaluation_ThresholdQuantity using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_TendererQualificationTypeCode",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_TendererQualificationTypeCode using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_TendererQualificationTypeCode",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_TendererQualificationTypeCode using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_TendererQualificationDescription",
    "expression": "grel:if(value.startsWith(\"['\"), value.replace(\",\", \"\"), value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_TendererQualificationDescription using expression grel:if(value.startsWith(\"['\"), value.replace(\",\", \"\"), value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_TendererQualificationDescription",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_TendererQualificationDescription using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_TendererQualificationDescription",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_TendererQualificationDescription using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TendererStatus_ProcurementProjectLotID",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TendererStatus_ProcurementProjectLotID using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TendererStatus_ProcurementProjectLotID",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TendererStatus_ProcurementProjectLotID using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_WinningParty_CompanyTypeCode",
    "expression": "grel:if(value.contains(\",\"), \"\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_WinningParty_CompanyTypeCode using expression grel:if(value.contains(\",\"), \"\", value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_WinningParty_CompanyTypeCode",
    "expression": "grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_WinningParty_CompanyTypeCode using expression grel:value.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "TenderResult_WinningParty_Name",
    "expression": "grel:value",
    "onError": "set-to-blank",
    "newColumnName": "TenderResult_WinningParty_Name_URI",
    "columnInsertIndex": 38,
    "description": "Create column TenderResult_WinningParty_Name_URI at index 38 based on column TenderResult_WinningParty_Name using expression grel:value"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_WinningParty_Name_URI",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_WinningParty_Name_URI using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_WinningParty_Name_URI",
    "expression": "grel:value.replace(\"Ñ\", \"N\").replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_WinningParty_Name_URI using expression grel:value.replace(\"Ñ\", \"N\").replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_WinningParty_ID",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_WinningParty_ID using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_WinningParty_ID",
    "expression": "grel:value.replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_WinningParty_ID using expression grel:value.replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ID",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ID using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ContractFolder_ID",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ContractFolder_ID using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_Name_URI",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_Name_URI using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProject_CountrySubentityCode",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProject_CountrySubentityCode using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProject_DurationMeasure",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProject_DurationMeasure using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_Parent_PartyName_URI",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_Parent_PartyName_URI using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_Parent_Parent_PartyName_URI",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_Parent_Parent_PartyName_URI using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_ID",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_ID using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_Parent_Parent_Parent_PartyName_URI",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_Parent_Parent_Parent_PartyName_URI using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_WinningParty_Name_URI",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_WinningParty_Name_URI using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_Parent_Parent_Parent_Parent_PartyName_URI",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_Parent_Parent_Parent_Parent_PartyName_URI using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_ID",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_ID using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_ContractID",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_ContractID using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_WinningParty_ID",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_WinningParty_ID using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "GeneralDocument_ID",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column GeneralDocument_ID using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_ID",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_ID using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderResult_AwardedTenderedProject_ProcurementProjectLotID",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderResult_AwardedTenderedProject_ProcurementProjectLotID using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TenderingTerms_ProcurementLegislationID",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TenderingTerms_ProcurementLegislationID using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_Parent_PartyName_URI",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_Parent_PartyName_URI using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_Parent_Parent_PartyName_URI",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_Parent_Parent_PartyName_URI using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_Parent_Parent_Parent_PartyName_URI",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_Parent_Parent_Parent_PartyName_URI using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_Parent_Parent_Parent_Parent_PartyName_URI",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_Parent_Parent_Parent_Parent_PartyName_URI using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_PartyName_URI",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_PartyName_URI using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_Parent_PartyName_URI",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_Parent_PartyName_URI using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_Parent_Parent_PartyName_URI",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_Parent_Parent_PartyName_URI using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ContractModification_ID",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ContractModification_ID using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ContractModification_ContractID",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ContractModification_ContractID using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_Parent_Parent_Parent_PartyName_URI",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_Parent_Parent_Parent_PartyName_URI using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_Parent_Parent_ID",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_Parent_Parent_ID using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_Parent_Parent_Parent_Parent_ID",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_Parent_Parent_Parent_Parent_ID using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_ID",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_ID using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_Parent_Parent_Parent_ID",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_Parent_Parent_Parent_ID using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_Parent_ID",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_Parent_ID using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TendererStatus_ProcurementProjectLotID",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TendererStatus_ProcurementProjectLotID using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ID",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LocatedContractingParty_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ID using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LegalDocumentReference_ID",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column LegalDocumentReference_ID using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "TechnicalDocumentReference_ID",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column TechnicalDocumentReference_ID using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "AdditionalDocumentReference_ID",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column AdditionalDocumentReference_ID using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProject_CountrySubentity",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\"Ñ\",\"N\").replace(\"ñ\",\"n\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProject_CountrySubentity using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\"Ñ\",\"N\").replace(\"ñ\",\"n\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ProcurementProjectLot_CountrySubentity",
    "expression": "grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\"Ñ\",\"N\").replace(\"ñ\",\"n\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ProcurementProjectLot_CountrySubentity using expression grel:value.replace(\"á\",\"a\").replace(\"é\",\"e\").replace(\"í\",\"i\").replace(\"ó\",\"o\").replace(\"ú\",\"u\").replace(\"Á\",\"A\").replace(\"É\",\"E\").replace(\"Í\",\"I\").replace(\"Ó\",\"O\").replace(\"Ú\",\"U\").replace(\"à\",\"a\").replace(\"è\",\"e\").replace(\"ì\",\"i\").replace(\"ò\",\"o\").replace(\"ù\",\"u\").replace(\"À\",\"A\").replace(\"È\",\"E\").replace(\"Ì\",\"I\").replace(\"Ò\",\"O\").replace(\"Ù\",\"U\").replace(\"Ñ\",\"N\").replace(\"ñ\",\"n\").replace(\" \", \"_\").replace(/[^A-Za-z0-9\\-._~]/, \"\")"
  }
]